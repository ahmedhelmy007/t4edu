<?php

namespace Tatweer\TrainingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Session\Session;
 
/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersRepository extends EntityRepository
{
    function __construct($em, \Doctrine\ORM\Mapping\ClassMetadata $class) {
        parent::__construct($em, $class);
   
    }
 
/* 
 Get current logged in user id 
 *  */
    public function CurrentLoggedInUserId()
    {
       // $session  = $this->getRequest()->getSession();
        $session = new Session();
        $user_data = new Users();

        $username= $session->get('username');

        $query= $this->getEntityManager()->createQuery(
           'SELECT u.idUser FROM TatweerTrainingBundle:Users u 
            WHERE u.username = :username 
            '
        )->setParameter( 'username' , $username );
        
        $user_data = $query->getArrayResult();

        return $user_data[0]['idUser'];

    }
/* 
 Return array of user roles
 @params : 
 * $groupId : user group 
 * $userId  : user id
 *  */
    public function getUserRolesAsArray( $userId , $groupId )
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.role) AS roleid ")
          ->where("p.group = :group_id AND p.user = :user_id" )
          ->setParameter( 'group_id' , $groupId )->setParameter('user_id' , $userId )
          ->getQuery();
        
        if($results = $query->getArrayResult())
        {
            foreach($results as $k => $v)
            {
                $rolesList[] = $v['roleid'];
            }
            
            return $rolesList;
        }
        
        return false;
    }
/* 
 Return array of user groups
 @params : 
 * $userId  : user id
 *  */
    public function getUserGroupsAsArray( $userId )
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.group) AS groupid ")
          ->where("p.user = :user_id AND p.role IN (2,3)" )
          ->setParameter('user_id' , $userId )
          ->getQuery();
        
        if($results = $query->getArrayResult())
        {
            foreach($results as $k => $v)
            {
                if($v['groupid'])
                $groupsList[] = $v['groupid'];
            }
            
            return $groupsList;
        }
        
        return false;
    }
/* 
 Return array of Trainer , Hr groups
 @params : 
 * $userId  : user id
 *  */
    public function getTrainerHrRolesAsArray( $userId )
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.role) AS roleid ")
          ->where("p.user = :user_id and p.role IN (6,7,8,9) " )
          ->setParameter('user_id' , $userId )
          ->getQuery();
        
        if($results = $query->getArrayResult())
        {
            foreach($results as $k => $v)
            {
                if($v['roleid'])
                $groupsList[] = $v['roleid'];
            }
            
            return $groupsList;
        }
        
        return false;
    }
/* 
 Check if user is alerady exist in specific group
 @params : 
 * $groupId : user group 
 *  */
    public function checkUserGroup($groupId)
    {
        $session = new Session();
        
        $userGroupRoles = $session->get('roles');
       
        if(isset( $userGroupRoles[$groupId]) )
        {
                return $userGroupRoles[$groupId];
        }
        
        return false;

    }
    
    
    public function getUserAndSystemRoles( $userId , $groupId , $departmentSystemRoles )
    {
        $em          = $this->getEntityManager();
        
        if(is_null($groupId))
           {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Roles', 'r')
          ->select(" r.idRole , r.nameAr, r.nameEn , IDENTITY(p.user) AS userHasPermission ")
          ->where("r.idRole IN ( :roles )  " )
          ->leftJoin('TatweerTrainingBundle:Permissions', 'p', 'WITH', 'p.role = r.idRole AND p.group IS NULL AND p.user = :user_id')
          ->setParameter('user_id' , $userId )
          ->setParameter('roles' , array_values($departmentSystemRoles) )
          ->getQuery();        
           }
           else 
           {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Roles', 'r')
          ->select(" r.idRole , r.nameAr, r.nameEn , IDENTITY(p.user) AS userHasPermission ")
          ->where("r.idRole IN ( :roles ) " )
          ->leftJoin('TatweerTrainingBundle:Permissions', 'p', 'WITH', 'p.role = r.idRole AND p.group = :group_id AND p.user = :user_id')
          ->setParameter('group_id' , $groupId )
          ->setParameter('user_id' , $userId )
          ->setParameter('roles' , array_values($departmentSystemRoles) )
                 
          ->getQuery();
           }
        return $query->getArrayResult();
        
        
        return false;
    }
    
    
/* 
 Return user roles in a specific group
 @params : 
 * $group_id : user group 
 * $userId  : user id
 *  */
    public function checkUserRoleInGroup( $group_id , $userId)
    {
        $em          = $this->getEntityManager();
        $group       = $group_id;
       
        
        while ($group)
        { 
         
        
        $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.role) AS roleid ,  IDENTITY(p.group) AS groupid ")
          ->where("p.group = :group_id AND p.user = :user_id AND p.role IN ('2','3') " )
          ->setParameter( 'group_id' , $group )->setParameter('user_id' , $userId )
          ->getQuery();
        
        if($results = $query->getArrayResult())
            return $results; 
            
        if($groupObj    = $em->getRepository('TatweerTrainingBundle:Groups')->get_parent($group))
        {
        $group          = $groupObj[0]['parent'];
        }
        else 
        $group          = false;
   
        }
        
        return false;
        
    }
/* 
 Return user data in a specific group and has specific roles 
 @params : 
 * $group_id : user group 
 * $roleids  : (array) of roles 
 *  */
    public function getUserByGroupRole($group , $roleids)
    {
        $em          = $this->getEntityManager();
        
        $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Users', 'u')
          ->select("u")
          ->leftJoin('TatweerTrainingBundle:Permissions', 'p', 'WITH', 'p.user = u.idUser')
          ->where('p.group = :group AND p.role IN ( :role )' )
          ->setParameter( 'group' , $group )
          ->setParameter( 'role' , array_values($roleids) )
          ->getQuery();
      
        if($query->getArrayResult())
        return $query->getArrayResult();
        
    return false;
    }
    
/* 
 Return user data who has specific roles 
 @params : 
 * $roleids  : (array) of roles 
 *  */
    public function getUserByRole( $roleids )
    {
        $em          = $this->getEntityManager();
        
        $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Users', 'u')
          ->select("u")
          ->leftJoin('TatweerTrainingBundle:Permissions', 'p', 'WITH', 'p.user = u.idUser')
          ->where("p.role IN ( :role )" )
          ->setParameter( 'role' , array_values($roleids) )
          ->getQuery();
        if($query->getArrayResult())
        return $query->getArrayResult();
        
    return false;
    
    }
/* 
 check if user has roles in a specific groups
 @params :
 * $groupId : user group 
 * $roleIds  : (array) of roles 
 *  */
    public function hasPermission($groupId , $roleIds)
    {
        $session = new Session();
        
        $userGroupRoles = $session->get('roles');
        foreach ($roleIds as $k => $v )
        if(isset($userGroupRoles[$groupId]) && in_array($v, $userGroupRoles[$groupId]) )
                return true;
        
        return false;

    }
    
    public function has_open_request($user_id , $isTrainingMember = null )
    {
        if(!is_null($isTrainingMember))
        {
            
        $query= $this->getEntityManager()->createQuery(
           'SELECT p , r FROM TatweerTrainingBundle:TrainingNeedsActionsLog p 
            JOIN p.trainingNeed r  WITH p.trainingNeed = r.idNeed
            WHERE p.assignedToTrainingSpecialist = :user_id AND r.isFinallyApproved IS NULL 
            '
        )->setParameter( 'user_id' , $user_id );
        
        }
        else 
        {
        $query= $this->getEntityManager()->createQuery(
           'SELECT p , r FROM TatweerTrainingBundle:TrainingNeedsActionsLog p 
            JOIN p.trainingNeed r   WITH p.trainingNeed = r.idNeed
            WHERE r.requestedForEmployee = :user_id AND r.isFinallyApproved IS NULL 
            '
        )->setParameter( 'user_id' , $user_id );
        //->setParameter('action' , array('feedback','forward') );
        }
        return $query->getArrayResult();
       
   
    }
    
 
    
   
    public function getUserResults($form_data)
    {
        $data = array();
        
        if(!empty($form_data['username']))
        {
        $data['userName'] = $form_data['username'];
        }
        
        if(!empty($form_data['employee_no']))
        {
        $data['employeeNo'] = $form_data['employee_no'];
        }
        
        if(!empty($form_data['ar_fullname']))
        {
        $data['nameAr'] = $form_data['ar_fullname'];
        }
        
        if(!empty($form_data['en_fullname']))
        {
        $data['nameEn'] = $form_data['en_fullname'];
        }
        
        $soapClient = null;
        // SOAP client
        $wsdl = 'http://dev-ws-srv/T4eduService/T4eduService.svc?wsdl';
        $soapClient = new \SoapClient($wsdl, array('cache_wsdl' => 0));
        $parameters = new \stdClass();
        
        try
        {
        //SEARCH FOR USERS IN ACTIVE DRIECTORY

        $parameters->userName = (isset($data['userName']) ? $data['userName'] : "");
        $parameters->employeeNo = (isset($data['employeeNo']) ? $data['employeeNo'] : "");
        $parameters->nameAr = (isset($data['nameAr']) ? $data['nameAr'] : "");
        $parameters->nameEn = (isset($data['nameEn']) ? $data['nameEn'] : "");

        
        $parameters->userType = "T4edu";
        $parameters->serviceKey = "1no42y=0mt6395R";
        $result = $soapClient->GetUserByKeys($parameters);

        } 
        catch (SoapFault $fault)
        {
	echo "Fault code: {$fault->faultcode}" . NEWLINE;
	echo "Fault string: {$fault->faultstring}" . NEWLINE;
	if ($soapClient != null)
	{
	$soapClient = null;
	}
	exit();
        }
        $soapClient = null;
        
        if($result->GetUserByKeysResult)
        {
            return  $result->GetUserByKeysResult->UserInfo;
        }
        
        return null;
    }
    
    private function getSubGroups($group_id)
    {
        $query= $this->getEntityManager()->createQuery(           
            'SELECT t2.name , t2.idGroup 
                FROM TatweerTrainingBundle:Groups AS t1
                LEFT JOIN TatweerTrainingBundle:Groups AS t2 WITH t1.idGroup = t2.parent
                WHERE t1.idGroup = :group_id ')->setParameter( 'group_id' , $group_id )
                ;
                 if($result = $query->getArrayResult())
                 {
                     return $result;
                 }
                 
                 
                 return FALSE;
    }
    

    
    private function getChildren($parent_id) 
    {
        
    $tree = Array();
    if (!empty($parent_id)) {
        $tree = $this->getSubGroups($parent_id);
        foreach ($tree as $key => $val) {
            if($ids = $this->getChildren($val['idGroup']))
            $tree = array_merge($tree, $ids);
        }
    }
  
    return $tree;
    }
    
/**
 * getDirectAssignedUsers
 * this is used by the getUsersAsList method
 * get assigned users data
 */
    private function getDirectAssignedUsers(&$tree)
    {
        $Grouprepository = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Groups');
        foreach ($tree as $key => $val) {
            $nusers = null; $index = 0;
           // if($this->getChildren($val['idGroup']))
           // {
              if($users = $Grouprepository->getAssignUsers($val['idGroup'] , $val['roles'] )) //2,3,
              {
                  
                  foreach($users as $k => $v)
                  {
                      // if user record does not belong to the logged in user
                      if($this->CurrentLoggedInUserId() != $v['user']['idUser'])
                      {
                     //echo $v['user']['idUser'];
                      $nusers[$index]         = $this->getUserResults(array('username' => $v['user']['username'] ));
                      $nusers[$index]->idUser = $v['user']['idUser'];
                      //$nusers[$index]['username']=$v['user']['username'];
                      $index++;
                      }
                  }
                  //echo $val['idGroup'].'<br/>' ;
                  //print_r($nusers); echo "<br/><br/><br/>";
               $tree[$key]['users'] = $nusers;    
              }
              
                
          //  }
            
            
        }
    }

    
/**
 * getTreeUsers
 * this is used by the getUsersAsTreeList method
 * get users data
 */
    private function getTreeUsers(&$tree , $roles )
    {
        $Grouprepository = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Groups');
        foreach ($tree as $key => $val) {
            $nusers = null; $index = 0;
            if($this->getChildren($val['idGroup']))
            {
              if($users = $Grouprepository->getAssignUsers($val['idGroup'] , $roles )) //2,3,
              {
                  
                  foreach($users as $k => $v)
                  {
                      // if user record does not belong to the logged in user
                      if($this->CurrentLoggedInUserId() != $v['user']['idUser'])
                      {
                     //echo $v['user']['idUser'];
                      $nusers[$index]         = $this->getUserResults(array('username' => $v['user']['username'] ));
                      $nusers[$index]->idUser = $v['user']['idUser'];
                      //$nusers[$index]['username']=$v['user']['username'];
                      $index++;
                      }
                  }
                  //echo $val['idGroup'].'<br/>' ;
                  //print_r($nusers); echo "<br/><br/><br/>";
               $tree[$key]['users'] = $nusers;    
              }
              
                
            }
            
            
        }
      
    }
/**
 * getUsersAsTreeList
 *
 * get assigned users (employee and moderator)  to the current group and all sub-groups 
 */
    public function getUsersAsTreeList($currentUserRoleId)
    {
        $group_tree = array();
        
        
        // get user's group ids 
        $currentLoggedInUserId = $this->CurrentLoggedInUserId();
       
        $query= $this->getEntityManager()->createQuery(
           'SELECT IDENTITY(p.group) AS group_id FROM TatweerTrainingBundle:Permissions p 
            WHERE p.user = :user_id AND p.role IN ( :role_id ) 
            '
        )->setParameter( 'user_id' , $currentLoggedInUserId )->setParameter( 'role_id' , array_values($currentUserRoleId) );
        
        if($user_data = $query->getArrayResult())
        {
            foreach ($user_data as $k => $v)
            {
        
        // get group tree 
        $parent = $v['group_id'];//moderator
        $tree = $this->getChildren($parent);
        $tree[]['idGroup'] = $v['group_id'];
        $this->getTreeUsers($tree , array(3,5));
        $group_tree[] = $tree;

            }
        return $group_tree;

        }
        return false;
        
    }
    
/**
 * getUsersAsList
 *
 * get assigned users (employee and moderator) to the current group and the direct sub-groups 
 */
    public function getUsersAsList($currentUserRoleId)
    {
        $group_tree = array();
        
        
        // get user's group ids 
        $currentLoggedInUserId = $this->CurrentLoggedInUserId();
       
        $query= $this->getEntityManager()->createQuery(
           'SELECT IDENTITY(p.group) AS group_id FROM TatweerTrainingBundle:Permissions p 
            WHERE p.user = :user_id AND p.role IN ( :role_id ) 
            '
        )->setParameter( 'user_id' , $currentLoggedInUserId )->setParameter( 'role_id' , array_values($currentUserRoleId) );
        
        if($user_data = $query->getArrayResult())
        {
            foreach ($user_data as $k => $v)
            {
        $count= 1;
        $tree = null;
        
        // get employees of the current user group
        $tree[0]['idGroup'] = $v['group_id'];
        $tree[0]['roles']   = array(3,5);
        
        // get the direct sub groups 
        $childs = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Groups')->get_child($v['group_id']);
        foreach ( $childs as $ck => $cv )
        {
            // get moderator of the direct subgroup 
            $tree[$count]['idGroup'] = $cv['idGroup'];
            $tree[$count]['roles']   = array(3);
            $count++;
        }
        
        // get all user data 
        $this->getDirectAssignedUsers($tree);
        $group_tree[] = $tree;

            }
        return $group_tree;

        }
        return false;
        
    }
    
    
/**
 * getUsersAsList
 *
 * get assigned users (employee and moderator) to the current group and the direct sub-groups 
 */
    public function getUserListWithActions($currentUserRoleId)
    {
        $em          = $this->getEntityManager();

        // get user list 
        $user_list = $this->getUsersAsTreeList($currentUserRoleId);
        // get current active period id 
        if($currentActivePeriod   = $this->getEntityManager()->getRepository('TatweerTrainingBundle:EvaluationPeriods')->hasOpenTrainingNeedsPeriod())
        {
            
        $trainingPeriodId    = $currentActivePeriod[0]['idPeriod'];
        
        if($user_list)
        {
 
        foreach ($user_list as $ukey => $uval) {
        foreach ($uval as $key => $val) {
           if(isset($val['users']))
           {
               
               foreach ($val['users'] as $uk => $v)
               {

                if($trainingneedObj = $this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->findBy(array('requestedForEmployee' => $v->idUser , 'trainingneedPeriod' =>$trainingPeriodId , 'employeeGroup' => $val['idGroup'] )))
                { 
                   $trainingneedID            =  $trainingneedObj[0]->getIdNeed();
                   // check if can tack action on this user log 
                   if(!$this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->canDoNextAction($trainingneedID))
                       unset($user_list[$ukey][$key]['users'][$uk]);  
                   if($this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->isAlreadyApprovedByTrainingManager($trainingneedID))
                       unset($user_list[$ukey][$key]['users'][$uk]);  
                    
                }
                else
                   unset($user_list[$ukey][$key]['users'][$uk]);   
               }
           }
        }
        }
        }
        return $user_list; 
        }
        
        return false;
    }
    
/**
 * getUsersAsList
 *
 * get assigned users (employee and moderator) to the current group and the direct sub-groups 
 */
    public function getUserListWithDetailsActions($currentUserRoleId)
    {
        $em          = $this->getEntityManager();

        // get user list 
        $user_list = $this->getUsersAsTreeList($currentUserRoleId);
        // get current active period id 
        if($currentActivePeriod   = $this->getEntityManager()->getRepository('TatweerTrainingBundle:EvaluationPeriods')->hasOpenTrainingNeedsPeriod())
        {
            
        $trainingPeriodId    = $currentActivePeriod[0]['idPeriod'];
        
        if($user_list)
        {
 
        foreach ($user_list as $ukey => $uval) {
        foreach ($uval as $key => $val) {
           if(isset($val['users']))
           {
               
               foreach ($val['users'] as $uk => $v)
               {

                if($trainingneedObj = $this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->findBy(array('requestedForEmployee' => $v->idUser , 'trainingneedPeriod' =>$trainingPeriodId , 'employeeGroup' => $val['idGroup'] )))
                { 
                   $trainingneedID            =  $trainingneedObj[0]->getIdNeed();
                   // check if can tack action on this user log 
                   if(!$this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->canDoNextAction($trainingneedID) 
                           || !$this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->hasDetails($trainingneedID) )
                       unset($user_list[$ukey][$key]['users'][$uk]);  
                    
                }
                else
                   unset($user_list[$ukey][$key]['users'][$uk]);   
               }
           }
        }
        }
        }
        return $user_list; 
        }
        
        return false;
    }
    
    
    public function  getUserListWithActionsForTrainerAndHr($currentUserRoleId)
    {
        $users = false;

        $sql = "
            SELECT `training_needs_actions_log`.assigned_to_role AS assigned_to_role ,
            `training_needs_actions_log`.assigned_to_training_specialist AS assigned_to_training_specialist , 
            `training_needs`.`id_need` As need_id ,
            `training_needs`.`requested_for_employee` As requested_for_employee  ,
            `training_needs`.`employee_group_id` As employee_group_id ,
            `users`.`username` As username
            FROM `training_needs` 
            
            JOIN ( SELECT MAX(`training_needs_actions_log`.`id_action`) AS actionid , 
            `training_needs_actions_log`.`training_need_id` 
            FROM `training_needs_actions_log`
            Group by `training_needs_actions_log`.`training_need_id` ) AS action 
            ON `training_needs`.`id_need`  = action.`training_need_id` 
            
            LEFT JOIN `training_needs_actions_log` ON action.actionid = `training_needs_actions_log`.`id_action`  
            LEFT JOIN `users` ON `users`.`id_user` = `training_needs`.requested_for_employee 
            ";    
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $results  = $stmt->fetchAll();

            if($results)
            { 
                
                        
                $index = 0;
                foreach ($results as $k => $v )
                {
                    if(!$this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->isAlreadyApprovedByTrainingManager($v['need_id']))
                    {
                    if( ( !is_null($v['assigned_to_role']) && $this->hasPermission(0 , array($v['assigned_to_role']) ) ) ||   ( !is_null($v['assigned_to_training_specialist']) && $v['assigned_to_training_specialist'] = $this->CurrentLoggedInUserId() ) )
                    {
                      $users[$index]          = $this->getUserResults(array('username' => $v['username'] ));
                      $users[$index]->idUser  = $v['requested_for_employee'];
                      $users[$index]->idGroup = $v['employee_group_id'];
                      $index++;
                    }
                    }
                }
                return $users;
            }
     return false;
         
    }
    
   
    public function  getUserListWithActionsForTrainerAndHrApprovedByTrainingManager($currentUserRoleId)
    {
        $users = false;

        $sql = "
            SELECT `training_needs_actions_log`.assigned_to_role AS assigned_to_role ,
            `training_needs_actions_log`.assigned_to_training_specialist AS assigned_to_training_specialist , 
            `training_needs`.`id_need` As need_id ,
            `training_needs`.`requested_for_employee` As requested_for_employee  ,
            `training_needs`.`employee_group_id` As employee_group_id ,
            `users`.`username` As username
            FROM `training_needs` 
            
            JOIN ( SELECT MAX(`training_needs_actions_log`.`id_action`) AS actionid , 
            `training_needs_actions_log`.`training_need_id` 
            FROM `training_needs_actions_log`
            Group by `training_needs_actions_log`.`training_need_id` ) AS action 
            ON `training_needs`.`id_need`  = action.`training_need_id` 
            
            LEFT JOIN `training_needs_actions_log` ON action.actionid = `training_needs_actions_log`.`id_action`  
            LEFT JOIN `users` ON `users`.`id_user` = `training_needs`.requested_for_employee 
            ";    
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $results  = $stmt->fetchAll();

            if($results)
            { 
                
                        
                $index = 0;
                foreach ($results as $k => $v )
                {
                    if($this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->isAlreadyApprovedByTrainingManager($v['need_id']))
                    {
                    if( ( !is_null($v['assigned_to_role']) && $this->hasPermission(0 , array($v['assigned_to_role']) ) ) ||   ( !is_null($v['assigned_to_training_specialist']) && $v['assigned_to_training_specialist'] = $this->CurrentLoggedInUserId() ) )
                    {
                      $users[$index]          = $this->getUserResults(array('username' => $v['username'] ));
                      $users[$index]->idUser  = $v['requested_for_employee'];
                      $users[$index]->idGroup = $v['employee_group_id'];
                      $index++;
                    }
                    }
                }
                return $users;
            }
     return false;
         
    }
    
    
    public function  getUserListApprovedByTrainingManager($currentUserRoleId)
    {
        $users = false;
        $em          = $this->getEntityManager();
        
        $sql = "
            SELECT `training_needs_actions_log`.assigned_to_role AS assigned_to_role ,
            `training_needs_actions_log`.assigned_to_training_specialist AS assigned_to_training_specialist , 
            `training_needs`.`id_need` As need_id ,
            `training_needs`.`requested_for_employee` As requested_for_employee  ,
            `training_needs`.`employee_group_id` As employee_group_id ,
            `users`.`username` As username
            FROM `training_needs` 
            
            JOIN ( SELECT MAX(`training_needs_actions_log`.`id_action`) AS actionid , 
            `training_needs_actions_log`.`training_need_id` 
            FROM `training_needs_actions_log`
            Group by `training_needs_actions_log`.`training_need_id` ) AS action 
            ON `training_needs`.`id_need`  = action.`training_need_id` 
            
            LEFT JOIN `training_needs_actions_log` ON action.actionid = `training_needs_actions_log`.`id_action`  
            LEFT JOIN `users` ON `users`.`id_user` = `training_needs`.requested_for_employee 
            ";    
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->execute();
            $results  = $stmt->fetchAll();

            if($results)
            { 
                
                        
                $index = 0;
                foreach ($results as $k => $v )
                {
                    if($em->getRepository('TatweerTrainingBundle:TrainingNeeds')->isApprovedByTrainingDepartment($v['need_id']))
                    {

                    if( ( !is_null($v['assigned_to_role']) && $this->hasPermission(0 , array($v['assigned_to_role']) ) ) ||   ( !is_null($v['assigned_to_training_specialist']) && $v['assigned_to_training_specialist'] = $this->CurrentLoggedInUserId() ) )
                    {
                      $users[$index]         = $this->getUserResults(array('username' => $v['username'] ));
                      $users[$index]->idUser = $v['requested_for_employee'];
                      $users[$index]->idGroup = $v['employee_group_id'];
                      $index++;
                    }

                    
                    }
                }
                return $users;
            }
     return false;
         
    }
    // return a list of user names 
    public function getDirectIndirectModerators($groupId)
    {
         $em          = $this->getEntityManager();
         while($groupId)
            {
                $moderatorGroups = $em->getRepository('TatweerTrainingBundle:Users')->getUserByGroupRole($groupId , array(3));
                if($moderatorGroups)
                foreach($moderatorGroups as $k => $v)
                    $users[] = $v['username'];
                if($parent       = $em->getRepository('TatweerTrainingBundle:Groups')->get_parent($groupId))
                   $groupId = $parent[0]['parent'];
                else 
                   $groupId = false; 
               
            }
            return $users;
    }
    
    public function getTrainingDepartmentMembers()
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.user) AS userid , u.username")
          ->leftJoin('TatweerTrainingBundle:Users', 'u', 'WITH', 'p.user = u.idUser')
          ->where("p.role IN ( '6','7','8','9' ) " )
          ->distinct()
          ->getQuery();
         if($results = $query->getResult())
         {
             // get each user roles
             foreach ($results as $k => $v)
             {
                 $results[$k]['roles'] = $this->getUserRoles($v['userid']);
                 $results[$k]['user'] =  $this->getUserResults(array('username' => $v['username'] ));
             }
             return $results;
         }
         
         return false;
    }
    
    public function getUserRoles($user_id)
    {
               
         $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.user) AS userid ,  p.idPermission  , r.nameAr, r.nameEn ")
          ->leftJoin('TatweerTrainingBundle:Roles', 'r', 'WITH', 'p.role = r.idRole')
          ->where("p.user = :userid AND r.idRole IN ( '6','7','8','9' ) " )
          ->setParameter('userid', $user_id)
          ->getQuery();
      
         return $query->getResult();
         
    }
    
    public function getAssignedTrainingDepartmentMembers()
    {
                
        $query= $this->getEntityManager()->createQuery(
            "SELECT DISTINCT p, u , r FROM TatweerTrainingBundle:Permissions p 
            JOIN p.user u 
            JOIN p.role r 
            WHERE  p.role IN ('6','7','8','9')
            Group by u.username"
        );
       
        return $query->getArrayResult();

    }
    
    
    public function getUsersForIndividualTrainingRequests()
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.user) AS userid , u.username , u.ableToRequestTraining AS ableToRequestTraining ")
          ->leftJoin('TatweerTrainingBundle:Users', 'u', 'WITH', 'p.user = u.idUser')
          ->where("p.role IN ( '3','5' ) " )
          ->distinct()
          ->getQuery();
         if($results = $query->getResult())
         {
             // get each user roles
             foreach ($results as $k => $v)
             {
                 $results[$k]['user'] =  $this->getUserResults(array('username' => $v['username'] ));
             }
             return $results;
         }
         
         return false;
    }
    
/* 
 check if current logged-in user able to request an indivadual training
 *  */
    
    public function ableToRequestIndivadualTraining()
    {
        
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Users', 'u')
          ->select("u")
          ->where("u.ableToRequestTraining = 1 AND u.idUser = :user_id" )
          ->setParameter('user_id', $this->CurrentLoggedInUserId())
          ->getQuery();
         if($results = $query->getResult())
         return true;
         
         return false;
    }
/* 
 return list of Employee groups 
 * @params : 
 * $groupId : user group 
 * $roles  : roles
 *  */
    
    public function getEmployeeGroups($userid , $roles )
    {
        
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" g.idGroup , g.name ")
          ->leftJoin('TatweerTrainingBundle:Groups', 'g', 'WITH', 'p.group = g.idGroup')
          ->where("p.user = :userid AND p.role IN ( :roles ) AND g.deleted = 0 ")
          ->setParameter('userid', $userid)->setParameter('roles', array_values($roles))
          ->distinct()
          ->getQuery();
         
        return $query->getArrayResult();
    }
    

    
/**
 * get Self-Trainings Users As List
 *
 * get assigned users (employee and moderator) to the current group and the direct sub-groups 
 */
    public function getSelfTrainingsRequests($currentUserRoleId , $isTrainerHr = false )
    {
        $em            = $this->getEntityManager();
        $new_user_list = $user_list_ids = array();
         
        if($isTrainerHr)
        {
        if($new_user_list = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Trainings')->followupAssignedSelfTraining($currentUserRoleId))
            return $new_user_list;  
        else 
            return false;
        }
        
        
        // get user list 
        $user_list = $this->getUsersAsTreeList($currentUserRoleId);
        $groupsList = $this->getUserGroupsAsArray( $this->CurrentLoggedInUserId() );

        if($user_list)
        {
        $counter = 0;
        foreach ($user_list as $ukey => $uval) {
        foreach ($uval as $key => $val) {
           if(isset($val['users']))
           {
              
               foreach ($val['users'] as $uk => $v)
               {
                   $user_list_ids[]=$v->idUser;
               /* if($trainingneedObj = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Trainings')->findAssignedSelfTraining($groupsList , $v->idUser))////////////////(array('requestedForEmployee' => $v->idUser , 'trainingneedPeriod' =>$trainingPeriodId , 'employeeGroup' => $val['idGroup'] )))
                {
                   //echo $v->idUser;      
                    foreach( $trainingneedObj as $trainingKey => $trainingValue )
                    {
                                       //    print_r($trainingValue['idTraining']); 
                  // echo "<br/><br/>";
                   $trainingneedID                      =  $trainingValue['selfRequestTrainingNeedsId'];

                           
                           
                   // check if can tack action on this user log 
                   if($this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->canDoNextAction($trainingneedID) && 
                      !$this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->isAlreadyApprovedByTrainingManager($trainingneedID)    
                           )
                   {
                     //  echo "<pre>";
                      //print_r($user_list[$ukey][$key]); 
                    // echo "</pre>";
                   $new_user_list[$counter][$uk] = $user_list[$ukey][$key];
                   $new_user_list[$counter][$uk]['idTraining']= $trainingValue['idTraining'];
                 //  echo $counter . "-".$uk . "-".$uk .$trainingValue['idTraining'] ."<br/><br/>" ;
                   //   echo "<br/><br/>".$new_user_list[$counter][$key]['users'][$uk]->idTraining;
                      echo $counter ;
                   $counter++;
                   }
                   
                      // unset($new_user_list[$ukey][$counter]['users'][$uk]);  
                  // if($this->getEntityManager()->getRepository('TatweerTrainingBundle:TrainingNeeds')->isAlreadyApprovedByTrainingManager($trainingneedID))
                       //unset($new_user_list[$ukey][$counter]['users'][$uk]);  
               
                    }
                  //  echo "<br/><br/>".$new_user_list[0][1]['users'][0]->idTraining;
                }
                //else
                //   unset($user_list[$ukey][$key]['users'][$uk]);   
                
                */
               }
           }
        }
        } 
       


        if($new_user_list = $this->getEntityManager()->getRepository('TatweerTrainingBundle:Trainings')->findAssignedSelfTraining($groupsList ,$user_list_ids))
        return $new_user_list; 

        
        }

       

        
        return false;
    }
    
    
}
