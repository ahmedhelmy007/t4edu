<?php

namespace Tatweer\TrainingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GroupsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupsRepository extends EntityRepository
{
    
    
    public function findIfUniqueName(array $data)
    {
        if($data['idGroup'] != NULL )
        {//if edit 
        return $this->getEntityManager()
            ->createQuery(
                "SELECT p FROM TatweerTrainingBundle:Groups p WHERE p.name = '".$data['name']."' AND p.idGroup <> ".$data['idGroup']. "  AND p.parent = '".$data['parent']."' AND p.deleted = 0 "
            )
            ->getResult();
        }
         else { // if update 
             return $this->getEntityManager()
            ->createQuery(
                "SELECT p FROM TatweerTrainingBundle:Groups p WHERE p.name = '".$data['name']."' AND p.parent = '".$data['parent']."' AND p.deleted = 0 "
            )
            ->getResult();
             }
        
    }
    public function getUserGroups($userid)
    {
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.group) AS groupid ")
          ->where("p.user = :userid ")
          ->setParameter('userid', $userid)
          ->distinct()
          ->getQuery();
         
        return $query->getArrayResult();
        
    }
    
    public function getGroupRoles($user_id , $group_id = null )
    {
        $roles_array = array();      
        $em          = $this->getEntityManager();
        if(is_null($group_id))
        {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.role) AS role ")
          ->where("p.user = :userid AND p.group IS NULL ")
          ->setParameter('userid', $user_id)
          ->getQuery(); 
        }
        else 
        {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Permissions', 'p')
          ->select(" IDENTITY(p.role) AS role ")
          ->where("p.user = :userid AND p.group = :groupid ")
          ->setParameter('userid', $user_id)->setParameter('groupid', $group_id)
          ->getQuery();
        }
        
        $result = $query->getArrayResult();
   
        foreach ($result as $k => $v)
        {
            $roles_array[] = $v['role'];
        }
        return $roles_array; 
    }
    
    public function getAssignUsers($group_id , $roles )
    {
                
        $query= $this->getEntityManager()->createQuery(
            'SELECT DISTINCT p, u , r FROM TatweerTrainingBundle:Permissions p 
            JOIN p.user u 
            JOIN p.role r 
            WHERE p.group = :id AND p.role IN ( :roles )
            Group by u.username'
        )->setParameter('id', $group_id)->setParameter('roles', array_values($roles));
        //print_r($query->getArrayResult()); echo "<br/><br/><br/>";
        return $query->getArrayResult();

    }
    
    public function getUserRoles($user_id , $group_id)
    {
         $roles_array = array();      
        $query= $this->getEntityManager()->createQuery(
            'SELECT DISTINCT p , r FROM TatweerTrainingBundle:Permissions p 
            JOIN p.role r 
            WHERE p.group = :group_id AND p.user = :user_id 
            '
        )->setParameter( 'group_id' , $group_id )->setParameter('user_id' , $user_id );
        
        $result = $query->getArrayResult();
   
        foreach ($result as $k => $v)
        {
            $roles_array['roles_ar'][] = $v['role']['nameAr'];
            $roles_array['roles_en'][] = $v['role']['nameEn'];
        }
        return $roles_array; 
    }
    
    
    public function has_open_request($group_id)
    {
        
        $query= $this->getEntityManager()->createQuery(
           'SELECT p , r FROM TatweerTrainingBundle:TrainingNeedsActionsLog p 
            JOIN p.trainingNeed r    WITH p.trainingNeed = r.idNeed
            WHERE r.employeeGroup = :group_id   AND r.isFinallyApproved IS NULL 
            '
        )->setParameter( 'group_id' , $group_id );//->setParameter('action' , array('feedback','forward') );
        
        return $query->getArrayResult();
       
   
    }
    
    public function get_child($parent_id)
    {
        $query= $this->getEntityManager()->createQuery(
            'SELECT  p.idGroup FROM TatweerTrainingBundle:Groups p 
            WHERE p.parent = :parent_id AND p.deleted = 0'
        )->setParameter('parent_id', $parent_id);
        
        return $query->getArrayResult();
    }
    
    public function get_parent($child_id)
    {
        $query= $this->getEntityManager()->createQuery(
            'SELECT  IDENTITY(p.parent) AS parent FROM TatweerTrainingBundle:Groups p 
            WHERE p.idGroup = :child_id'
        )->setParameter('child_id', $child_id);
        
        return $query->getArrayResult();
    }
    
}
