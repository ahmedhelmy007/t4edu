<?php

namespace Tatweer\TrainingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TrainingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrainingEvaluationsRepository extends EntityRepository
{

    
/* 
 Return self-training data for an employee 
 @params : 
 *  */
    
    public function getApprovedTrainings()
    {
        $em          = $this->getEntityManager();
        $currentLoggedInUserId = $em->getRepository('TatweerTrainingBundle:Users')->CurrentLoggedInUserId();
        
        $sql = "
             SELECT `trainings`.id_training AS idTraining ,
            `training_needs_actions_log`.id_action AS canNotCancel ,
            `training_needs_actions_log`.action ,
            `trainings`.modified_by  AS modifiedBy,
            `trainings`.modified_date AS modifiedDate,
            `users`.arabic_fullname  AS arabic_fullname ,
            `users`.english_fullname  AS english_fullname ,
            `training_evaluations`.id_evaluation AS isEvaluated 
            FROM `trainings` 
            
            LEFT JOIN ( SELECT MAX(`training_needs_actions_log`.`id_action`) AS actionid , 
            `training_needs_actions_log`.`training_need_id` 
            FROM `training_needs_actions_log`
            Group by `training_needs_actions_log`.`training_need_id` ) AS action 
            ON `trainings`.`self_request_trainingneed_id`  = action.`training_need_id` 
            
            LEFT JOIN `training_needs_actions_log` ON action.actionid = `training_needs_actions_log`.`id_action` 
            LEFT JOIN `users` ON `users`.id_user = `trainings`.modified_by
            LEFT JOIN `training_evaluations` ON `training_evaluations`.training_id = `trainings`.id_training
            WHERE `trainings`.created_by = $currentLoggedInUserId AND `trainings`.self_request_trainingneed_id IS NOT NULL AND  `trainings`.approved_by_hr = 1
      
            
            UNION
            
            SELECT `trainings`.id_training AS idTraining ,
            `training_needs_actions_log`.id_action AS canNotCancel ,
            `training_needs_actions_log`.action ,
            `trainings`.modified_by  AS modifiedBy,
            `trainings`.modified_date AS modifiedDate,
            `users`.arabic_fullname  AS arabic_fullname ,
            `users`.english_fullname  AS english_fullname ,
            `training_evaluations`.id_evaluation AS isEvaluated 
            
            FROM `trainings` 
            LEFT JOIN `training_needs_values` ON `training_needs_values`.id_value = `trainings`.`training_needs_program_id` 
            LEFT JOIN ( SELECT MAX(`training_needs_actions_log`.`id_action`) AS actionid , 
            `training_needs_actions_log`.`training_need_id` 
            FROM `training_needs_actions_log`
            Group by `training_needs_actions_log`.`training_need_id` ) AS action 
            ON `training_needs_values`.`training_need_id`  = action.`training_need_id` 
            
            LEFT JOIN `training_needs_actions_log` ON action.actionid = `training_needs_actions_log`.`id_action` 
            LEFT JOIN `training_needs` ON `training_needs_actions_log`.training_need_id = `training_needs`.`id_need` 
            LEFT JOIN `users` ON `users`.id_user = `trainings`.modified_by
            LEFT JOIN `training_evaluations` ON `training_evaluations`.training_id = `trainings`.id_training
            WHERE `training_needs`.requested_for_employee = $currentLoggedInUserId AND `trainings`.self_request_trainingneed_id IS NULL AND  `trainings`.chosen_by_employee = 1 AND `trainings`.approved_by_hr = 1
         
            
            ";    
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $results  = $stmt->fetchAll();  
        
            return $results;
        
        
        return false;

    }
  

   
    public function buildForm($evaluationID = null )
    {
    
        $em          = $this->getEntityManager();
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:TrainingEvaluationSections', 's')
          ->select("s")
          ->where("s.active = 1")
          ->addOrderBy("s.idSection", "ASC")
          ->getQuery();
        $form['sectionResult'] = $query->getArrayResult();
        
        if(!is_null($evaluationID))
        {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:TrainingEvaluationCriterias', 'c')
          ->select("c.idCriteria , IDENTITY(c.section) AS section , c.nameAr , c.nameEn , IDENTITY(v.selectedOption) AS selectedOption , v.idValue AS idValue ")
          ->leftJoin('TatweerTrainingBundle:TrainingEvaluationValues', 'v', 'WITH', 'v.criteria = c.idCriteria')
          ->where("c.active = 1 AND v.evaluation = ".$evaluationID)
          ->addOrderBy("c.section , c.idCriteria", "ASC")
          ->getQuery();
        }
        else 
        {
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:TrainingEvaluationCriterias', 'c')
          ->select("c.idCriteria , IDENTITY(c.section) AS section , c.nameAr , c.nameEn")
          ->where("c.active = 1")
          ->addOrderBy("c.section , c.idCriteria", "ASC")
          ->getQuery();
        }
        $form['criteriasResult'] = $query->getArrayResult();
        
         $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:TrainingEvaluationOptions', 'o')
          ->select("o.idOption , IDENTITY(o.section) AS section , o.nameAr , o.nameEn")
          ->where("o.active = 1")
          ->addOrderBy("o.idOption ", "ASC")
          ->getQuery();
        $form['optionsResult'] = $query->getArrayResult();
        
        return $form;
    }
    
    
    
}
