<?php

namespace Tatweer\TrainingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DepartmentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentsRepository extends EntityRepository
{
    
    public function getRelatedDepartments()
    {
        $em          = $this->getEntityManager();
            
          $CurrentLoggedInUserId = $em->getRepository('TatweerTrainingBundle:Users')->CurrentLoggedInUserId();
          $query = $em->createQueryBuilder()
          ->from('TatweerTrainingBundle:Departments', 'd')
          ->select("d")
          ->leftJoin('TatweerTrainingBundle:Permissions', 'p', 'WITH', 'p.group = d.idGroup')
          ->where("p.user = :user_id AND d.parent IS NULL AND d.deleted = 0 " )
          ->setParameter( 'user_id' , $CurrentLoggedInUserId );
           
          $entities = $query->getQuery()->execute();
 //echo $entities[0]['idGroup']; 
        
        return $entities;
    }
    
    
    public function findIfUniqueName(array $data)
    {
        if($data['idGroup'] != NULL )
        {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT p FROM TatweerTrainingBundle:Departments p WHERE p.name = '".$data['name']."' AND p.parent IS NULL AND p.idGroup <> ".$data['idGroup']."  AND p.deleted = 0 "
            )
            ->getResult();
        }
         else {
             return $this->getEntityManager()
            ->createQuery(
                "SELECT p FROM TatweerTrainingBundle:Departments p WHERE p.name = '".$data['name']."' AND p.parent IS NULL  AND p.deleted = 0 "
            )
            ->getResult();
             }
        
    }
    
    public function getAssignUsers($group_id , $roles )
    {
                
        $query= $this->getEntityManager()->createQuery(
            'SELECT DISTINCT p, u , r FROM TatweerTrainingBundle:Permissions p 
            JOIN p.user u 
            JOIN p.role r 
            WHERE p.group = :id AND p.role IN ( :roles )
            Group by u.username'
        )->setParameter('id', $group_id)->setParameter('roles', array_values($roles));
       
        return $query->getArrayResult();

    }
    
    public function getUserRoles($user_id , $group_id)
    {
         $roles_array = array();      
        $query= $this->getEntityManager()->createQuery(
            'SELECT DISTINCT p , r FROM TatweerTrainingBundle:Permissions p 
            JOIN p.role r 
            WHERE p.group = :group_id AND p.user = :user_id 
            '
        )->setParameter( 'group_id' , $group_id )->setParameter('user_id' , $user_id );
        
        $result = $query->getArrayResult();
   
        foreach ($result as $k => $v)
        {
            $roles_array['roles_ar'][] = $v['role']['nameAr'];
            $roles_array['roles_en'][] = $v['role']['nameEn'];
        }
        return $roles_array; 
    }
    
    
    public function has_open_request($group_id)
    {
        
        $query= $this->getEntityManager()->createQuery(
           'SELECT p , r FROM TatweerTrainingBundle:TrainingNeedsActionsLog p 
            JOIN p.trainingNeed r    WITH p.trainingNeed = r.idNeed
            WHERE r.employeeGroup IN ( :group_id )  AND r.isFinallyApproved IS NULL 
            '
        )->setParameter( 'group_id' , $group_id );
        //->setParameter('action' , array('feedback','forward') );
        
        return $query->getArrayResult();
       
   
    }
    
    public function get_child($parent_id)
    {
        $query= $this->getEntityManager()->createQuery(
            'SELECT  p.idGroup FROM TatweerTrainingBundle:Departments p 
            WHERE p.parent IN ( :parent_id ) AND p.deleted = 0'
        )->setParameter('parent_id', $parent_id);
        
        return $query->getArrayResult();
    }
    
    
  
    public function getDepartmentOfGroup( $group )
    {
        $em          = $this->getEntityManager();
        while ($group)
        {
            
        if($groupObj    = $em->getRepository('TatweerTrainingBundle:Groups')->get_parent($group))
        {
        if( is_null($groupObj[0]['parent']) )
            return $group;
        else
        $group          = $groupObj[0]['parent'];
        
        }
        else 
            return $group;
        //$group          = false;
   
        }
        return false;   
    }
    

}



